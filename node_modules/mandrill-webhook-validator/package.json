{
  "name": "mandrill-webhook-validator",
  "description": "Validator functionality for mandrill webhook signatures.",
  "version": "0.1.0",
  "homepage": "https://github.com/scryptmouse/mandrill-webhook-validator",
  "author": {
    "name": "Alexa Grey",
    "email": "devel@mouse.vc"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/scryptmouse/mandrill-webhook-validator.git"
  },
  "bugs": {
    "url": "https://github.com/scryptmouse/mandrill-webhook-validator/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/scryptmouse/mandrill-webhook-validator/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/mandrill-webhook-validator",
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "grunt nodeunit"
  },
  "devDependencies": {
    "glob": "^5.0.3",
    "grunt": "~0.4.5",
    "grunt-contrib-jshint": "~0.11.1",
    "grunt-contrib-nodeunit": "~0.4.1",
    "grunt-contrib-watch": "~0.6.1",
    "node-mocks-http": "^1.2.7"
  },
  "keywords": [
    "mandrill",
    "webhooks",
    "webhook",
    "mailchimp",
    "express"
  ],
  "dependencies": {
    "lodash": "^3.6.0"
  },
  "readme": "# mandrill-webhook-validator [![Build Status](https://secure.travis-ci.org/scryptmouse/mandrill-webhook-validator.png?branch=master)](http://travis-ci.org/scryptmouse/mandrill-webhook-validator)\n\nValidator functionality for [Mandrill's](http://mandrill.com/) somewhat complex [webhook request signing](http://help.mandrill.com/entries/23704122-Authenticating-webhook-requests).\n\n## Getting Started\nInstall the module with: `npm install mandrill-webhook-validator --save`\n\n## Documentation\n### Direct usage\n```javascript\nvar validator = require('mandrill-webhook-validator')\n  , signature = request.get('X-Mandrill-Signature')\n;\n\nif (signature === validator.makeSignature(WEBHOOK_KEY, WEBHOOK_URL, request.body)) {\n  // signed correctly!\n}\n```\n\n### In Express\nA middleware generator is provided for quick use with express. On a successful\nauthentication, it'll set `mandrill_signature` on the `request` object.\n\nBy default, it will forward an error with proper HTTP status codes on invalid\nwebhook requests for the application to handle however. If you would like for\nit to bypass default error handling and end the response immediately (with a\nplain text status message), use the option `{ end_on_failure: true }`.\n\n```javascript\nvar validator\t= require('mandrill-webhook-validator')\n  , express\t\t= require('express')\n  , router      = express.router()\n;\n\n// To use the normal express `next(err)` on authentication failure\nrouter.use(validator.createExpressMiddleware({ key: WEBHOOK_KEY, url: WEBHOOK_URL }));\n\n// To end the respone immediately on a failed authentication, use `end_on_failure`\nrouter.use(validator.createExpressMiddleware({ key: WEBHOOK_KEY, url: WEBHOOK_URL, end_on_failure: true }));\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n_(Nothing yet)_\n\n## License\nCopyright (c) 2015 Alexa Grey\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "mandrill-webhook-validator@0.1.0",
  "_from": "mandrill-webhook-validator@^0.1.0"
}
